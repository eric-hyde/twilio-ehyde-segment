import {
  to = segment_reverse_etl_model.id-dCYuMDD5A9stDWyQqrxiut
  id = "dCYuMDD5A9stDWyQqrxiut"
}

resource "segment_reverse_etl_model" "id-dCYuMDD5A9stDWyQqrxiut" {
  description             = "Programatically generated rETL model that is associated with an Engage rETL audience"
  enabled                 = true
  name                    = "Linked Audience rETL Model"
  query                   = "WITH ID_GRAPH AS (\n  SELECT\n    `SEGMENT_ID`,\n    `CANONICAL_SEGMENT_ID`\n  FROM (\n    SELECT\n      updates.`SEGMENT_ID`,\n      updates.`CANONICAL_SEGMENT_ID`,\n      ROW_NUMBER() OVER (PARTITION BY updates.`SEGMENT_ID` ORDER BY NOT updates2.`CANONICAL_SEGMENT_ID` IS NULL NULLS LAST, updates.`SEQ` DESC NULLS FIRST) AS rn\n    FROM `segment-data-graph`.`test`.`id_graph_updates` AS updates\n    LEFT JOIN `segment-data-graph`.`test`.`id_graph_updates` AS updates2\n      ON updates2.`SEGMENT_ID` = updates.`CANONICAL_SEGMENT_ID`\n      AND CAST(updates.`UUID_TS` AS DATETIME) < (\n        CAST(updates2.`UUID_TS` AS DATETIME) + INTERVAL '2' HOUR\n      )\n      AND updates2.`CANONICAL_SEGMENT_ID` <> updates2.`SEGMENT_ID`\n      AND updates2.`CANONICAL_SEGMENT_ID` <> updates.`CANONICAL_SEGMENT_ID`\n  ) AS ORDERED_ID_GRAPH\n  WHERE\n    rn = 1\n), EXTERNAL_ID_MAPPING AS (\n  SELECT\n    `CANONICAL_SEGMENT_ID`,\n    `EXTERNAL_ID_TYPE`,\n    `EXTERNAL_ID_VALUE`\n  FROM (\n    SELECT\n      COALESCE(id_graph.`CANONICAL_SEGMENT_ID`, ids.`SEGMENT_ID`) AS `CANONICAL_SEGMENT_ID`,\n      ids.`EXTERNAL_ID_TYPE`,\n      ids.`EXTERNAL_ID_VALUE`,\n      ROW_NUMBER() OVER (PARTITION BY ids.`EXTERNAL_ID_HASH` ORDER BY ids.`TIMESTAMP` DESC NULLS FIRST) AS rn\n    FROM `segment-data-graph`.`test`.`external_id_mapping_updates` AS ids\n    LEFT JOIN ID_GRAPH AS id_graph\n      ON id_graph.`SEGMENT_ID` = ids.`SEGMENT_ID`\n    WHERE\n      `EXTERNAL_ID_TYPE` IN ('android.idfa', 'email', 'ios.idfa', 'user_id')\n  ) AS ORDERED_EXTERNAL_ID_MAPPING\n  WHERE\n    rn = 1\n), PROFILE_TRAITS AS (\n  WITH last_profile_traits_updates AS (\n    SELECT\n      *,\n      ROW_NUMBER() OVER (PARTITION BY `SEGMENT_ID` ORDER BY CASE WHEN `SEQ` IS NULL THEN '0' ELSE `SEQ` END DESC NULLS FIRST) AS last_record\n    FROM `segment-data-graph`.`test`.`profile_traits_updates` AS updates\n  ), profile_traits_values AS (\n    SELECT DISTINCT\n      COALESCE(id_graph.`CANONICAL_SEGMENT_ID`, updates.`SEGMENT_ID`) AS `CANONICAL_SEGMENT_ID`,\n      LAST_VALUE(updates.`email` IGNORE NULLS) OVER (PARTITION BY COALESCE(id_graph.`CANONICAL_SEGMENT_ID`, updates.`SEGMENT_ID`) ORDER BY updates.`SEQ` ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS `email`\n    FROM last_profile_traits_updates AS updates\n    FULL OUTER JOIN ID_GRAPH AS id_graph\n      ON id_graph.`SEGMENT_ID` = updates.`SEGMENT_ID` AND updates.last_record = 1\n  )\n  SELECT\n    sids.`CANONICAL_SEGMENT_ID`,\n    MAX(tra.`email`) AS `email`\n  FROM EXTERNAL_ID_MAPPING AS sids\n  LEFT JOIN profile_traits_values AS tra\n    ON sids.`CANONICAL_SEGMENT_ID` = tra.`CANONICAL_SEGMENT_ID`\n  WHERE\n    sids.`EXTERNAL_ID_TYPE` IN ('android.idfa', 'email', 'ios.idfa', 'user_id')\n  GROUP BY\n    sids.`CANONICAL_SEGMENT_ID`\n), PROFILE_FILTER AS (\n  SELECT\n    `CANONICAL_SEGMENT_ID`\n  FROM PROFILE_TRAITS AS PT\n  WHERE\n    (\n      NOT PT.`email` IS NULL\n    )\n)\nSELECT DISTINCT\n  *\nFROM (\n  SELECT\n    `CANONICAL_SEGMENT_ID` AS `MATCHID`,\n    `CANONICAL_SEGMENT_ID`\n  FROM PROFILE_FILTER\n) AS DEDUPED_PROJECTIONS"
  query_identifier_column = "matchId"
  source_id               = "wgTDxNQhwPoryz8Uch5TEB"
}